import Head from 'next/head';
import { useContext, useState } from 'react';
import { MainContext } from '../context';

import { TileDocument } from '@ceramicnetwork/stream-tile';

import styles from '../styles/Home.module.css';

export default function Home() {
  const { tryAuthenticate, ceramic } = useContext(MainContext);

  const [schemaDoc, setSchemaDoc] = useState({});
  const [profileDoc, setProfileDoc] = useState({});
  const [loaded, setLoaded] = useState(false);
  const [error, setError] = useState('');

  const schemaContent = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    title: 'NFT Standard Schema Test',
    type: 'object',
    properties: {
      description: {
        type: 'string',
        maxLength: 420,
      },
      image: {
        type: 'string',
        maxLength: 200,
      },
      name: {
        type: 'string',
        maxLength: 150,
      },
      attributes: [
        {
          strength: {
            type: 'integer',
            maxLength: 2,
          },
          stamina: {
            type: 'integer',
            maxLength: 2,
          },
          speed: {
            type: 'integer',
            maxLength: 2,
          },
          health: {
            type: 'integer',
            maxLength: 2,
          },
          magicMastery: {
            type: 'integer',
            maxLength: 2,
          },
        },
      ]
    },
    required: ['description', 'image', 'name', 'attributes'],
  }

  const profileContent = {
    description: 'Beveloper BAO | Development🤝Education | Full stack web3 dev | Buidlooor & Shipooor',
    image: 'https://gateway.pinata.cloud/ipfs/QmQQpDbHBpsUyr16CWsCn5ji4TpZzoYxTmeZJchvRjpYmn',
    name: 'Open Sourcerer',
    attributes: [
      {
        strength: 99,
        stamina: 87,
        speed: 1,
        health: 50,
        magicMastery: 0,
      }
    ]
  }

  const createSchemaDocument = async () => {
    await tryAuthenticate();
    // The following call will fail if the Ceramic instance does not have an authenticated DID
    const doc = await TileDocument.create(ceramic, schemaContent);

    console.log(typeof doc);
    console.log(doc);
    setSchemaDoc(doc);
    console.log("Set Schema Doc:", schemaDoc);
    // The stream ID of the created document can then be accessed as the `id` property
    return doc.commitId
  }

  const updateSchemaDocument = async () => {
    await tryAuthenticate();
    console.log(schemaDoc);
    // First, we need to load the document
    const doc = await TileDocument.load(ceramic, schemaDoc.id);
    console.log(doc);
    // The following call will fail if the Ceramic instance does not have an authenticated DID
    await doc.update(schemaContent);
    setSchemaDoc(doc);
    console.log("Update Schema Doc:", schemaDoc);
  }

  // The `id` argument can be a stream ID (to load the latest version)
  // or a commit ID (to load a specific version)
  const loadSchemaDocument = async () => {
    const doc = await TileDocument.load(ceramic, schemaDoc.id);
    setSchemaDoc(doc);
    console.log(doc);
  }

  const createProfileDocument = async () => {
    await tryAuthenticate();
    const doc = await TileDocument.create(ceramic, profileContent, schemaDoc.commitId);
    setProfileDoc(doc);
    console.log("New Profile:", profileDoc);
  }

  const updateProfileDocument = async () => {
    await tryAuthenticate();
    // First, we need to load the document
    const doc = await TileDocument.load(ceramic, profileDoc.id);
    // The following call will fail if the Ceramic instance does not have an authenticated DID
    await doc.update(profileContent);
    setProfileDoc(doc);
    console.log("Update Profile Doc:", profileDoc);
  }

  const loadProfileDocument = async () => {
    const doc = await TileDocument.load(ceramic, profileDoc.commitId);
    setProfileDoc(doc)
    console.log(doc);
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Ceramic Basic Profile Template</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className={styles.header}>
        <h1 className={styles.title}>
          Welcome to Ceramic Profiles Template!
        </h1>
      </header>
      <main className={styles.main}>
        <button className={styles.button} onClick={createSchemaDocument}>
          Create Schema Document
        </button>
        <button className={styles.button} onClick={updateSchemaDocument}>
          Update Schema Document
        </button>
        <button className={styles.button} onClick={loadSchemaDocument}>
          Load Schema Document
        </button>
        <button className={styles.button} onClick={createProfileDocument}>
          Create Profile
        </button>
        <button className={styles.button} onClick={updateProfileDocument}>
          Update Profile
        </button>
        <button className={styles.button} onClick={loadProfileDocument}>
          Load Profile
        </button>
      </main>
    </div>
  )
}
